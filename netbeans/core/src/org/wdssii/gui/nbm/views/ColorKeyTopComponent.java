/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.wdssii.gui.nbm.views;

import java.awt.BorderLayout;
import java.util.TreeMap;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.wdssii.gui.ColorMap;
import org.wdssii.gui.ColorMapRenderer;
import org.wdssii.gui.CommandManager;
import org.wdssii.gui.ProductManager;
import org.wdssii.gui.ProductManager.ProductDataInfo;
import org.wdssii.gui.commands.ProductCommand;
import org.wdssii.gui.views.ColorKeyView;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//org.wdssii.gui.nbm.views//ColorKey//EN",
autostore = false)
@TopComponent.Description(preferredID = "ColorKeyTopComponent",
iconBase = "org/wdssii/gui/nbm/views/color_wheel.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.wdssii.gui.nbm.views.ColorKeyTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ColorKeyAction",
preferredID = "ColorKeyTopComponent")
public final class ColorKeyTopComponent extends ThreadedTopComponent implements ColorKeyView {
    // ----------------------------------------------------------------
    // Reflection called updates from CommandManager.
    // See CommandManager execute and gui updating for how this works
    // When sources or products change, update the navigation controls
    public void ProductCommandUpdate(ProductCommand command) {
        // Any loading/deleting of products, etc..can cause a change in the
        // product data info and filters, etc.
        updateGUI(command);
    }
    
    private JTable myTable;
    private DefaultTableModel myModel;
    private ColorMapRenderer myRenderer = new ColorMapRenderer();
    
    @Override
    public void updateInSwingThread(Object command) {
        updateTable();
    }
    
    public ColorKeyTopComponent() {
        initComponents();
        initTable();
        
        CommandManager.getInstance().registerView(ColorKeyView.ID, this);
        setName(NbBundle.getMessage(ColorKeyTopComponent.class, "CTL_ColorKeyTopComponent"));
        setToolTipText(NbBundle.getMessage(ColorKeyTopComponent.class, "HINT_ColorKeyTopComponent"));

    }

    public void initTable(){
        final JTable t = new javax.swing.JTable();
        myTable = t;
        final DefaultTableModel m = new DefaultTableModel();
        m.addColumn("Product");
        
        myModel = m;
        t.setModel(m);
        t.setFillsViewportHeight(
                true);
        t.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        jColorKeyScrollPane.setViewportView(t);
        
        jColorKeyPanel.add(myRenderer, BorderLayout.CENTER);
        updateTable();
    }
    
    public void updateTable(){
        myModel.setRowCount(0);
        
        TreeMap<String, ProductDataInfo> info = ProductManager.getInstance().getProductDataInfoSet();
       
        for(ProductDataInfo i:info.values()){
           String n = i.getName();
           ColorMap c = i.getColorMap();
           if (c != null){
               String[] columns = {n};
               myModel.addRow(columns);
           }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jColorKeyScrollPane = new javax.swing.JScrollPane();
        jColorKeyPanel = new javax.swing.JPanel();

        jColorKeyPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jColorKeyPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jColorKeyScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
            .addComponent(jColorKeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jColorKeyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jColorKeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jColorKeyPanel;
    private javax.swing.JScrollPane jColorKeyScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
