package org.wdssii.gui.nbm.views;

import javax.swing.JScrollPane;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.wdssii.gui.CommandManager;
import org.wdssii.gui.GridVisibleArea;
import org.wdssii.gui.commands.ProductCommand;
import org.wdssii.gui.products.Product;
import org.wdssii.gui.swing.ProductTableModel;
import org.wdssii.gui.swing.SimpleTable;
import org.wdssii.gui.views.TableProductView;

/**
 * DataTableTopComponent shows the 2D tracking table of any product
 * capable of displaying its data in an excel format.
 * @author Robert Toomey
 */
@ConvertAsProperties(dtd = "-//org.wdssii.gui.nbm.views//DataTable//EN",
autostore = false)
@TopComponent.Description(preferredID = "DataTableTopComponent",
iconBase = "org/wdssii/gui/nbm/views/color_swatch.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = false)
@ActionID(category = "Window", id = "org.wdssii.gui.nbm.views.DataTableTopComponent")
@ActionReference(path = "Menu/Window/WDSSII" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_DataTableAction",
preferredID = "DataTableTopComponent")
public final class DataTableTopComponent extends ThreadedTopComponent implements TableProductView {

    // ----------------------------------------------------------------
    // Reflection called updates from CommandManager.
    // See CommandManager execute and gui updating for how this works
    // When sources or products change, update the navigation controls
    public void ProductCommandUpdate(ProductCommand command) {
        updateGUI(command);
    }
   
    @Override
    public void updateInSwingThread(Object command) {
       Product p =  CommandManager.getInstance().getTopProduct();
       if (myTableModel != null){
           myTableModel.setProduct(p);
           jProductDataTable.revalidate();
           jProductDataTable.repaint();
       }
    }
        
    private ProductTableModel myTableModel;
    private SimpleTable jProductDataTable;

    @Override
    public GridVisibleArea getVisibleGrid() {
       GridVisibleArea a = null;
       if (myTableModel != null){
           return myTableModel.getCurrentVisibleGrid();
       }
       return null;
    }

    public DataTableTopComponent() {
        initComponents();
        initTable();
       // setIcon(SwingIconFactory.getImageByName("DownArrowIcon"));
        CommandManager.getInstance().registerView(TableProductView.ID, this);
        setName(NbBundle.getMessage(DataTableTopComponent.class, "CTL_DataTableTopComponent"));
        setToolTipText(NbBundle.getMessage(DataTableTopComponent.class, "HINT_DataTableTopComponent"));

    }

    public void initTable(){
        myTableModel = new ProductTableModel();
        jProductDataTable = new SimpleTable(jDataTableScrollPane, 100,100);
        jProductDataTable.setupScrollPane(jDataTableScrollPane);
        jProductDataTable.setModel(myTableModel);
        jDataTableScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        jDataTableScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDataTableScrollPane = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());
        add(jDataTableScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jDataTableScrollPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
