package org.wdssii.gui.nbm.views;

import net.miginfocom.swing.MigLayout;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.wdssii.gui.CommandManager;
import org.wdssii.gui.ProductManager;
import org.wdssii.gui.SourceManager.SourceCommand;
import org.wdssii.gui.commands.AnimateCommand;
import org.wdssii.gui.commands.ProductCommand;
import org.wdssii.gui.commands.WdssiiCommand;
import org.wdssii.gui.products.ProductHandlerList;
import org.wdssii.gui.views.NavView;
import org.wdssii.gui.views.WdssiiView;

@ConvertAsProperties(dtd = "-//org.wdssii.gui.nbm.views//Navigator//EN",
autostore = false)
@TopComponent.Description(preferredID = "NavigatorTopComponent",
iconBase = "org/wdssii/gui/nbm/views/eye.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "org.wdssii.gui.nbm.views.NavigatorTopComponent")
@ActionReference(path = "Menu/Window/WDSSII" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_NavigatorAction",
preferredID = "NavigatorTopComponent")
/** Navigator allows us to move forward/back in time and up/down elevation
 * for a particular product.
 * 
 * @author Robert Toomey
 */
public final class NavigatorTopComponent extends ThreadedTopComponent implements WdssiiView {

    private NavView myPanel;

    // ----------------------------------------------------------------
    // Reflection called updates from CommandManager.
    // See CommandManager execute and gui updating for how this works
    // When sources or products change, update the navigation controls
    public void ProductCommandUpdate(ProductCommand command) {
        updateGUI(command);
    }

    //public void ProductSelectCommandUpdate(ProductSelectCommand command) {
    //    updateGUI(command);
    //}
    public void SourceCommandUpdate(SourceCommand command) {
        updateGUI(command);
    }

    public void AnimateCommandUpdate(AnimateCommand command) {
        updateGUI(command);
    }

    @Override
    public void updateInSwingThread(Object command) {
        WdssiiCommand w = null;
        if (myPanel != null){
          myPanel.update(w);
        }
    }

    public NavigatorTopComponent() {

        setLayout(new MigLayout("fill, inset 0", "", ""));
        myPanel = new NavView();
        add(myPanel, "grow");

        CommandManager.getInstance().registerView("navview", this);
        setName(NbBundle.getMessage(NavigatorTopComponent.class, "CTL_NavigatorTopComponent"));
        setToolTipText(NbBundle.getMessage(NavigatorTopComponent.class, "HINT_NavigatorTopComponent"));

    }

    /** Get our product handler list.  For now at least,  this is global */
    private ProductHandlerList getProductHandlerList() {
        ProductManager m = ProductManager.getInstance();
        ProductHandlerList p = m.getProductOrderedSet();
        return p;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
